"""
iaf_psc_exp - Leaky integrate-and-fire neuron model with exponential PSCs
#########################################################################

Description
+++++++++++

iaf_psc_exp is an implementation of a leaky integrate-and-fire model
with exponential-kernel postsynaptic currents (PSCs) according to [1]_.
Thus, postsynaptic currents have an infinitely short rise time.

The threshold crossing is followed by an absolute refractory period (t_ref)
during which the membrane potential is clamped to the resting potential
and spiking is prohibited.

.. note::
   If tau_m is very close to tau_syn_exc or tau_syn_inh, numerical problems
   may arise due to singularities in the propagator matrics. If this is
   the case, replace equal-valued parameters by a single parameter.

   For details, please see ``IAF_neurons_singularity.ipynb`` in
   the NEST source code (``docs/model_details``).


References
++++++++++

.. [1] Tsodyks M, Uziel A, Markram H (2000). Synchrony generation in recurrent
       networks with frequency-dependent synapses. The Journal of Neuroscience,
       20,RC50:1-5. URL: https://infoscience.epfl.ch/record/183402


See also
++++++++

iaf_cond_exp
"""
neuron iaf_psc_exp_wta:

  state:
    r integer = 0             # counts number of tick during the refractory period
    V_m mV = 0 mV             # Membrane potential
  end

  equations:
    # Old calculation for V_m
    #kernel I_kernel_inh = exp(-t / tau_syn_inh)     # exponentially decaying inhibitory kernel # INFO: only used if inhibitory connections exist
    #kernel I_kernel_exc = exp(-t / tau_syn_exc)     # exponentially decaying excitatory kernel
    #inline I_syn pA = convolve(I_kernel_exc, exc_spikes) - convolve(I_kernel_inh, inh_spikes)
    #V_m' = -V_m / tau_m + (I_syn + I_stim) / C_m

    # Alternative calculation of V_m
    kernel decay_time_kernel = exp(-t / tau_m)
    kernel rise_time_kernel = exp(-t / tau_syn_exc)
    inline y real = (convolve(decay_time_kernel, exc_spikes) - convolve(rise_time_kernel, exc_spikes))/ pA
    V_m' = 0 mV / s
  end

  parameters:
    # Capacitance of the membrane
    C_m pF = 250 pF             # TODO: double check with paper
    # Membrane time constant
    tau_m ms = 20 ms
    # Time constant of inhibitory synaptic current
    tau_syn_inh ms = 2 ms       # INFO: only used if inhibitory connections exist
    # Time constant of excitatory synaptic current
    tau_syn_exc ms = 2 ms
    # Resting potential
    E_L  mV = 0 mV
    # Reset value of the membrane potential
    V_reset mV = 0 mV - E_L
    # Maximum rate within current WTA circuit
    R_max Hz = 100 Hz
  end

  input:
    exc_spikes pA <- excitatory spike
    inh_spikes pA <- inhibitory spike
    I_stim pA <- continuous
  end

  output: spike

  update:
    integrate_odes()
    V_m = y * mV  # update V_m

    rate Hz = R_max * exp(V_m/mV)  # INFO: normalization term is implemented deeper in the .cpp/.h file generated by this model

    p real = resolution() * rate/1000
    if random_uniform(0, 1) <= p:
      emit_spike()
    end
  end
end